---
import { readCV } from "../services.js";
import { sections } from "../utils/const.js";
import Anchor from "./Anchor.astro";
import Icon from "./Icon.astro";

const { name, text } = sections.find((elm) => elm.name === "knowledge");
const { skills } = await readCV();
const filters = {
  "front-end": "front end",
  "back-end": "back end",
  tool: "herramientas",
  language: "lenguages",
};
---

<section id={name}>
  <h1 class="section-title">{text}</h1>

  <section id="content">
    <div id="filters">
      {
        Object.entries(filters).map(([id, text]) => {
          return (
            <label id="filter-container">
              <input type="checkbox" id={id} /> {text}
            </label>
          );
        })
      }
    </div>

    <section class="card-container">
      {
        skills
          .sort((a, b) => {
            const first = a.name.toLowerCase();
            const second = b.name.toLowerCase();

            return first.localeCompare(second);
          })
          .map(({ website, name, level, keywords }) => {
            return (
              <Anchor
                isExternalLink
                class="card"
                aria-label={`${name}, ${level}`}
                href={website}
                data-cat={keywords?.join(" ")}
              >
                <Icon name={name} />

                <footer class="card-footer">
                  <h1 class="card-title">{name}</h1>

                  <small class="card-level" data-level={level}>
                    {level}
                  </small>
                </footer>
              </Anchor>
            );
          })
      }
    </section>
  </section>
</section>

<style>
  section[id="knowledge"] {
    display: grid;
    gap: 24px;
    width: 100%;
    aspect-ratio: 395 / 368;
    align-content: baseline;
    width: 100%;

    & #content {
      display: grid;
      gap: 48px;

      & #filters {
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      column-gap: 24px;
      row-gap: 16px;
      flex-wrap: wrap;

      &:has(input[type="checkbox"]:checked) {
        & #filter-container:has(input[type="checkbox"]:not(:checked)) {
          pointer-events: none;
        }
      }

      & #filter-container {
        box-shadow: 0px 0px 1.5px currentColor;
        padding: 4px 12px;
        border-radius: var(--border-radius-max);
        transition-duration: 0.3s;
        transition-property: border-color, color, background-color:;
        transition-timing-function: ease;
        cursor: pointer;
        user-select: none;
        word-break: keep-all;

        &::first-letter {
          text-transform: capitalize;
        }

        &:has(input[type="checkbox"]:not(:checked)) {
            @media (pointer: fine) {
            &:hover {
              background-color: color-mix(
                in srgb,
                transparent,
                var(--current-neon-theme) 15%
              );
            }
          }
        }

        & input[type="checkbox"] {
          display: none;
        }

        &:has(input[type="checkbox"]:checked) {
          box-shadow: 0px 0px 3px var(--current-neon-theme);
          text-shadow: 0px 0px 12px var(--current-neon-theme);
          color: color-mix(
            in srgb,
            currentColor,
            var(--current-neon-theme) 50%
          );
        }
      }

      &:has(input[type="checkbox"]) {
        &:has(#front-end:checked) {
          ~ .card-container {
            .card:not([data-cat*="front-end"]) {
              display: none;
            }
          }
        }

        &:has(#back-end:checked) {
          ~ .card-container {
            .card:not([data-cat*="back-end"]) {
              display: none;
            }
          }
        }

        &:has(#tool:checked) {
          ~ .card-container {
            .card:not([data-cat*="tool"]) {
              display: none;
            }
          }
        }

        &:has(#language:checked) {
          ~ .card-container {
            .card:not([data-cat*="language"]) {
              display: none;
            }
          }
        }
      }
    }

    & .card-container {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      justify-content: center;

      & .card {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        text-decoration: none;
        padding: 0.3rem;
        transition-duration: 0.15s;
        transition-property: border;
        transition-timing-function: ease;
        border: 1px solid transparent;
        border-radius: var(--border-radius-med);
        text-align: center;
        padding: 12px 16px;
        color: currentColor;

        @media (pointer: fine) {
          &:hover {
            border-color: var(--palette-grey);
            text-shadow: 1px 1.5px 2px var(--palette-grey);
          }
        }

        @media (pointer: coarse) {
          &:active {
            background-color: var(--palette-grey);
          }
        }

        [icon] {
          height: 48px;
          width: 48px;
        }

        [icon="github" i],
        [icon="vercel" i],
        [icon="markdown" i] {
          filter: drop-shadow(0px 0px 8px var(--palette-white));
        }

        & .card-footer {
          display: flex;
          flex-wrap: wrap;
          flex-direction: column;
          align-items: center;
          gap: 3px;

          & .card-title {
            font-family: var(--font-family-title);
            font-weight: 600;
            font-size: 16.8px;
          }

          & .card-level {
            --color-level: transparent;
            --color-transparency: 0%;
            padding: 0.15rem 0.4rem;
            border-radius: var(--border-radius-min);
            border: 1px solid var(--color-level);
            letter-spacing: 1px;
            line-height: normal;
            background-color: color-mix(
              in srgb,
              transparent var(--color-transparency),
              var(--color-level)
            );
            font-family: var(--font-family-text);
          }

          & [data-level="b√°sico" i] {
            --color-level: rgb(128 128 128);
            --color-transparency: 90%;
          }

          & [data-level="intermedio" i] {
            --color-level: rgb(0 0 255);
            --color-transparency: 85%;
          }

          & [data-level="avanzado" i] {
            --color-level: rgb(0 128 0);
            --color-transparency: 70%;
          }
        }
      }
    }
    }
  }
</style>
