---
import { lookingForAJob, sections, socialMedia } from "../utils/const";
---

<header class="header-container">
  <section class="contact">
    <button id="darkModeButton" type="button" aria-label="Alternar modo oscuro">
      <svg-icon name="sun"></svg-icon>
      <svg-icon name="moon"></svg-icon>
    </button>

    <article class="social-container">
      <div class="social">
        {
        socialMedia.map(({ link, name, icon }) => {
        return (
        <custom-anchor href={link} isExternaLink aria-label={`Ver cuenta en ${name}`}>
          <svg-icon name={icon} />
        </custom-anchor>
        );
        })
        }
      </div>

      {
      lookingForAJob && (
      <custom-anchor href="/CV/CV_es.pdf" download="CV - Sebastian Cortes.pdf" aria-label="Descargar curriculum vitae"
        class="download-cv">
        Descargar CV
      </custom-anchor>
      )
      }
    </article>
  </section>

  <nav class="index-list">
    <ul>
      {
      Object.values(sections).map(({ name, text }) => (
      <li>
        <custom-anchor href={"#" + name} aria-label={`Ir a secciÃ³n ${text.toLowerCase()}`}>
          {text}
        </custom-anchor>
      </li>
      ))
      }
    </ul>
  </nav>
</header>

<style>
  .header-container {
    display: flex;
    z-index: 1;
    column-gap: 48px;
    row-gap: 24px;
    justify-content: space-evenly;
    padding-top: 16px;
    padding-bottom: 16px;
    font-family: var(--font-family-text);
    flex-wrap: wrap;
    backdrop-filter: blur(24px);
    position: sticky;
    top: 0px;
    align-items: center;

    & .wrapped {
      justify-content: center;
    }
  }

  .contact {
    display: flex;
    align-items: center;
    column-gap: 48px;
    row-gap: 12px;
    flex-wrap: wrap;
    justify-content: center;

    & .social-container {
      display: flex;
      column-gap: 32px;
      row-gap: 8px;
      align-items: center;
      flex-wrap: wrap;
      justify-content: center;

      & .social {
        display: flex;
        gap: 0.5rem;
        justify-content: center;

        & :global(a) {
          display: flex;

          :is([theme="dark"]) & {
            [icon] {
              fill: var(--palette-white);
            }
          }
        }
      }

      & .download-cv {
        transition-duration: 0.2s;
        transition-property: color, border-style, border-color, font-weight,
          text-shadow;
        transition-timing-function: ease;
        border: 1px dashed currentColor;
        border-radius: var(--border-radius-min);
        padding: 6px 12px;
        text-decoration: none;
        text-align: center;

        @media (pointer: fine) {
          &:hover {
            color: var(--current-neon-theme);
            border-style: solid;
            font-weight: bold;
            text-shadow: 0 0 16px var(--current-neon-theme);
          }
        }

        @media (pointer: coarse) {
          &:active {
            color: var(--current-neon-theme);
            border-style: solid;
            font-weight: bold;
            text-shadow: 0 0 16px var(--current-neon-theme);
          }
        }
      }
    }

    & :global([icon]) {
      height: 32px;
      width: 32px;
    }
  }

  .index-list {
    display: flex;
    align-items: center;

    &>ul {
      display: flex;
      column-gap: 16px;
      row-gap: 12px;
      flex-wrap: wrap;
      justify-content: center;
      border-radius: var(--border-radius-min);
      background-color: var(--palette-grey);
      padding: 8px 4px;

      &>li {
        &> :global(a) {
          text-decoration: none;
          word-break: break-all;
          border-radius: var(--border-radius-min);
          padding: 4px 8px;
          transition-duration: 0.3s;
          transition-property: color, background-color, linear-gradient;
          transition-timing-function: ease;
          --bg-color: rgb(91 91 250 / 10%);

          :is([theme="dark"]) & {
            --bg-color: rgb(0 255 0 / 10%);
          }

          @media (pointer: fine) {
            &:hover {
              background-color: var(--bg-color);
              color: var(--current-neon-theme);
            }
          }

          @media (pointer: coarse) {
            &:active {
              background-color: var(--bg-color);
              color: var(--current-background-theme);
            }
          }
        }
      }

      :is(.header-container.wrapped) & {
        justify-content: center;
      }
    }
  }

  #darkModeButton {
    display: flex;
    border-color: transparent;
    border-width: 1px;
    border-style: solid;
    background-color: transparent;
    padding: 4.8px;
    border-radius: var(--border-radius-min);
    aspect-ratio: 1 / 1;

    @media (pointer: fine) {
      &:hover {
        border-color: var(--palette-grey);
      }
    }

    @media (pointer: coarse) {
      &:active {
        border-color: var(--palette-grey);
      }
    }

    [icon="sun"] {
      display: none;
    }

    [icon="moon"] {
      color: var(--palette-black);
    }

    :is([theme="dark"]) & {
      [icon="sun"] {
        color: yellow;
        display: block;
      }

      [icon="moon"] {
        display: none;
      }
    }
  }
</style>

<script>
  import "./Anchor.js";
  import "./Icon.js";

  // Dark mode
  document.getElementById("darkModeButton").addEventListener("click", () => {
    const element = document.documentElement;
    const isDark = element.getAttribute("theme").includes("dark");
    const theme = isDark ? "light" : "dark";

    localStorage.setItem("theme", theme);
    element.setAttribute("theme", theme);
  });
</script>