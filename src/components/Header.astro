---
import { lookingForAJob, sections, socialMedia } from "../utils/const";
import Anchor from "./Anchor.astro";
---

<header class="header-container">
  <section class="contact">
    <button id="darkModeButton" type="button" aria-label="Alternar modo oscuro">
      <svg-icon name="sun"></svg-icon>
      <svg-icon name="moon"></svg-icon>
    </button>

    <article class="social-container">
      <div class="social">
        {
          socialMedia.map(({ link, name, icon }) => {
            return (
              <Anchor
                url={link}
                goToAnotherWeb
                aria-label={`Ver cuenta en ${name}`}
              >
                <svg-icon name={icon} />
              </Anchor>
            );
          })
        }
      </div>

      {
        lookingForAJob && (
          <>
            <a
              href="/CV/CV_es.pdf"
              download="CV - Sebastian Cortes.pdf"
              aria-label="Descargar curriculum vitae"
              class="download-cv"
            >
              Descargar CV
            </a>
          </>
        )
      }
    </article>
  </section>

  <nav class="index-list">
    <ul>
      {
        Object.values(sections).map(({ name, text }) => (
          <li>
            <Anchor
              url={"#" + name}
              aria-label={`Ir a secciÃ³n ${text.toLowerCase()}`}
            >
              {text}
            </Anchor>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<style>
  .header-container {
    display: flex;
    z-index: 1;
    transition: var(--transition-one-milisecond);
    column-gap: 48px;
    row-gap: 24px;
    justify-content: space-evenly;
    padding-top: 16px;
    padding-bottom: 16px;
    font-family: var(--font-family-text);
    flex-wrap: wrap;
    backdrop-filter: blur(24px);
    position: sticky;
    top: 0px;

    & .wrapped {
      justify-content: center;
    }
  }

  .contact {
    display: flex;
    align-items: center;
    column-gap: 48px;
    row-gap: 12px;
    flex-wrap: wrap;
    justify-content: center;

    & .social-container {
      display: flex;
      column-gap: 32px;
      row-gap: 8px;
      align-items: center;
      flex-wrap: wrap;
      justify-content: center;

      & .social {
        display: flex;
        gap: 0.5rem;
        justify-content: center;

        & :global(a) {
          display: flex;

          :is([theme="dark"]) & {
            [icon] {
              fill: var(--palette-white);
            }
          }
        }
      }

      & .download-cv {
        transition: var(--transition-two-milisecond);
        border: 1px dashed currentColor;
        border-radius: var(--border-radius-min);
        padding: 0.3rem 0.5rem;
        text-decoration: none;
        text-align: center;

        @media (pointer: fine) {
          &:hover {
            border: 1px solid currentColor;
            font-weight: bold;
            text-shadow: 0 0 1rem currentColor;
          }
        }

        @media (pointer: coarse) {
          &:active {
            border: 1px solid currentColor;
            font-weight: bold;
            text-shadow: 0 0 1rem currentColor;
          }
        }
      }
    }

    & :global([icon]) {
      height: 2rem;
      width: 2rem;
    }
  }
  .index-list {
    display: flex;
    align-items: center;
    text-align: center;

    & ul {
      list-style: none;
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
      padding: 0;

      & li > :global(a) {
        text-decoration: none;

        @media (pointer: fine) {
          &:hover {
            text-decoration: underline;
          }
        }

        @media (pointer: coarse) {
          &:active {
            text-decoration: underline;
          }
        }
      }

      :is(.header-container.wrapped) & {
        justify-content: center;
      }
    }
  }

  #darkModeButton {
    display: flex;
    border-color: transparent;
    border-width: 1px;
    border-style: solid;
    background-color: transparent;
    padding: 4.8px;
    border-radius: var(--border-radius-min);

    @media (pointer: fine) {
      &:hover {
        border-color: var(--palette-grey);
      }
    }

    @media (pointer: coarse) {
      &:active {
        border-color: var(--palette-grey);
      }
    }

    [icon="sun"] {
      display: none;
    }

    [icon="moon"] {
      color: var(--palette-black);
    }

    :is([theme="dark"]) & {
      [icon="sun"] {
        color: yellow;
        display: block;
      }

      [icon="moon"] {
        display: none;
      }
    }
  }
</style>

<script>
  import { DOMSelector } from "../utils/scripts";
  import "./Icon.js";

  const $headerContainer = DOMSelector(".header-container");
  let auxHeight = 0;

  // Adjusts the justify-content CSS prop of the header
  const adjustAligment = () => {
    const { height, width } = getComputedStyle($headerContainer);
    const heightComputed = Number(height.replace(/[A-z]/g, ""));
    const widthComputed = Number(width.replace(/[A-z]/g, ""));

    if (!auxHeight) auxHeight = heightComputed;
    if (auxHeight && auxHeight > heightComputed) auxHeight = heightComputed;

    if (auxHeight < heightComputed || widthComputed <= 680) {
      $headerContainer.classList.add("wrapped");
    } else {
      $headerContainer.classList.remove("wrapped");
    }
  };

  window.addEventListener("load", adjustAligment);
  window.addEventListener("resize", adjustAligment);

  // Dark mode
  document.getElementById("darkModeButton").addEventListener("click", () => {
    const element = document.documentElement;
    const isDark = element.getAttribute("theme").includes("dark");
    const theme = isDark ? "light" : "dark";

    localStorage.setItem("theme", theme);
    element.setAttribute("theme", theme);
  });
</script>
