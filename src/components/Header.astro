---
import { lookingForAJob, sections } from "../utils/const";
import resume from "../resume.json";
import Icon from "./Icon.astro";
import Anchor from "./Anchor.astro";

const {
  basics: { profiles },
} = resume;
---

<header class="header-container">
  <section class="contact">
    <label id="dark-mode-container">
      <input id="dark-mode-button" type="checkbox" />
      <Icon name="sun" />
      <Icon name="moon" />
    </label>

    <article class="social-container">
      <div class="social">
        {
          profiles.map(({ network, url }) => {
            return (
              <Anchor
                href={url}
                isExternalLink
                aria-label={`Ver cuenta en ${network}`}
              >
                <Icon name={network.toLowerCase()} />
              </Anchor>
            );
          })
        }
      </div>

      {
        lookingForAJob && (
          <Anchor
            href="/CV/CV_es.pdf"
            download="CV - Sebastian Cortes.pdf"
            aria-label="Descargar CV"
            class="download-cv"
          >
            Descargar CV
          </Anchor>
        )
      }
    </article>
  </section>

  <nav class="index-list">
    <ul>
      {
        Object.values(sections).map(({ name, text }) => (
          <li>
            <Anchor
              href={"#" + name}
              aria-label={`Ir a secciÃ³n ${text.toLowerCase()}`}
            >
              {text}
            </Anchor>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<style>
  .header-container {
    display: flex;
    z-index: 1;
    column-gap: 48px;
    row-gap: 24px;
    justify-content: space-around;
    padding-block: 16px;
    font-family: var(--font-family-text);
    flex-wrap: wrap;
    backdrop-filter: blur(24px);
    position: sticky;
    top: 0px;
    align-items: center;
    width: 100%;
    max-width: 1280px;
    justify-self: center;
  }

  .contact {
    display: flex;
    align-items: center;
    column-gap: 48px;
    row-gap: 12px;
    flex-wrap: wrap;
    justify-content: center;

    & #dark-mode-container {
      display: flex;
      border: 1px solid transparent;
      background-color: var(--is-dark-mode);
      padding: 4.8px;
      border-radius: var(--border-radius-min);
      justify-content: center;
      align-items: center;

      @media (pointer: fine) {
        &:hover {
          border-color: var(--palette-grey);
        }
      }

      @media (pointer: coarse) {
        &:active {
          border-color: var(--palette-grey);
        }
      }

      svg[icon="sun"] {
        color: yellow;
        display: block;
      }

      svg[icon="moon"] {
        color: var(--palette-black);
      }

      :is([theme="light"]) {
        svg[icon="moon"] {
          display: block;
        }

        svg[icon="sun"] {
          display: none;
        }
      }

      &:is(:not([theme])) {
        @media (prefers-color-scheme: light) {
          svg[icon="sun"] {
            display: none;
          }

          #dark-mode-button:checked {
            ~ svg[icon="moon"] {
              display: none;
            }

            ~ svg[icon="sun"] {
              display: block;
            }
          }
        }

        @media (prefers-color-scheme: dark) {
          & svg[icon="moon"] {
            display: none;
          }

          #dark-mode-button:checked {
            ~ svg[icon="sun"] {
              display: none;
            }

            ~ svg[icon="moon"] {
              display: block;
            }
          }
        }
      }

      & #dark-mode-button {
        display: none;
      }
    }

    & .social-container {
      display: flex;
      column-gap: 32px;
      row-gap: 8px;
      align-items: center;
      flex-wrap: wrap;
      justify-content: center;

      & .social {
        display: flex;
        gap: 0.5rem;
        justify-content: center;
        align-items: center;

        & :global(a) {
          display: flex;

          [icon] {
            fill: var(--palette-white);
          }
        }
      }

      & .download-cv {
        transition-duration: 0.2s;
        transition-property: color, font-weight, text-shadow;
        transition-timing-function: ease;
        border: 1px dotted var(--current-text-theme);
        border-radius: var(--border-radius-min);
        padding: 6px 12px;
        text-decoration: none;
        text-align: center;
        color: currentColor;

        @media (pointer: fine) {
          &:hover {
            color: var(--current-neon-theme);
            border-style: solid;
            text-shadow: 0 0 16px var(--current-neon-theme);
            border-color: var(--current-neon-theme);
          }
        }

        @media (pointer: coarse) {
          &:active {
            color: var(--current-neon-theme);
            border-style: solid;
            text-shadow: 0 0 16px var(--current-neon-theme);
            border-color: var(--current-neon-theme);
          }
        }
      }
    }

    & :global([icon]) {
      height: 32px;
      width: 32px;
    }
  }

  .index-list {
    display: flex;
    align-items: center;

    & > ul {
      display: flex;
      column-gap: 16px;
      row-gap: 12px;
      flex-wrap: wrap;
      justify-content: center;
      border-radius: var(--border-radius-min);
      background-color: var(--palette-grey);
      padding: 8px 4px;
      aspect-ratio: 511 / 37;

      & > li {
        & > :global(a) {
          text-decoration: none;
          word-break: break-all;
          border-radius: var(--border-radius-min);
          padding: 4px 8px;
          transition-duration: 0.3s;
          transition-property: color, background-color, linear-gradient;
          transition-timing-function: ease;
          --bg-color: color-mix(
            in srgb,
            transparent 90%,
            var(--current-neon-theme)
          );
          color: currentColor;

          @media (pointer: fine) {
            &:hover {
              background-color: var(--bg-color);
              color: var(--current-neon-theme);
            }
          }

          @media (pointer: coarse) {
            &:active {
              background-color: var(--bg-color);
              color: var(--current-background-theme);
            }
          }
        }
      }
    }
  }
</style>

<script>
  // Dark mode
  document.getElementById("dark-mode-button").addEventListener("click", () => {
    const element = document.documentElement;
    const isDark = element.getAttribute("theme")?.includes("dark") ?? false;
    const theme = isDark ? "light" : "dark";

    localStorage.setItem("theme", theme);
    element.setAttribute("theme", theme);
  });
</script>
