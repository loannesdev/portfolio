---
import { readCV } from "@/services";
import { sections } from "@/utils/const";
import Anchor from "../Anchor.astro";
import Icon from "../Icon.astro";
import Suggestions from "@/components/sections/Suggestions.astro";

const { name, text } = sections.find((elm) => elm.name === "about");

const {
  basics: { summary },
  interests,
} = await readCV();
---

<section id={name}>
  <h1 class="section-title">{text}</h1>

  <section class="paragraph-container">
    <Fragment set:html={summary} />
  </section>

  <div class="location">
    <h1 class="location-title">Ubicación</h1>

    <Anchor
      isExternalLink
      href="https://maps.app.goo.gl/kzraGrPbge2W5JAMA"
      class="location-link"
    >
      Cali, Colombia
    </Anchor>

    <span class="time-zone"></span>
  </div>

  <section class="interests-container">
    <h1 class="interests-title">Algunos de mis intereses son</h1>

    <div class="interests-tags">
      {
        interests.map(({ name }) => {
          return <colored-tag>{name}</colored-tag>;
        })
      }
    </div>
  </section>

  <fragment>
    <button
      class="suggestions-btn"
      popovertarget="suggestions"
      popovertargetaction="toggle"
    >
      Mis sugerencias de recursos sobre programación
      <Icon name="tabler-external-link" />
    </button>

    <popover id="suggestions" class="suggestions-section" popover>
      <button class="close-btn">Cerrar</button>

      <Suggestions />
    </popover>
  </fragment>
</section>

<style>
  section[id] {
    display: grid;

    & :global(strong, .interests-title, .location-title) {
      color: var(--neon-text-variant);
    }

    & :global(a) {
      color: currentColor;
    }

    & .paragraph-container {
      display: flex;
      flex-direction: column;
      gap: 24px;

      & > :global(p) {
        font-size: 1.2rem;
        text-wrap: pretty;
        color: var(--reading-text-color);
      }
    }
  }

  .location {
    margin-top: 24px;
    font-size: 1.2rem;

    & .location-title {
      font-size: 1.3rem;
      font-family: var(--font-title);
      font-weight: 800;
      margin-bottom: 4px;
    }

    & .location-link {
      font-size: 1.5rem;
      font-weight: 700;
      letter-spacing: 2px;
    }

    & .time-zone {
      color: var(--reading-text-color);
    }
  }

  .interests-container {
    margin-top: 24px;

    & .interests-title {
      font-family: var(--font-title);
      font-size: 1.3rem;
      font-weight: 800;
      margin-bottom: 4px;
    }

    & .interests-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 6px;

      & colored-tag {
        border-radius: var(--border-radius-min);
        font-size: 1rem;
        padding: 4px 12px;
        border: 1px solid currentColor;
        background-color: color-mix(
          in srgb,
          transparent 90%,
          var(--current-text-theme)
        );
        user-select: none;
      }
    }
  }

  .suggestions-btn {
    margin-top: 48px;
    transition-property: background-color;
    padding: 8px 14px;
    display: flex;
    align-items: center;
    gap: 6px;
    font-weight: 500;
    letter-spacing: 0.5px;
    color: currentColor;

    & :global(svg) {
      height: 28px;
      width: 28px;
      transition: 0.2s ease;
      transition-property: transform, stroke-width;
    }

    @media (pointer: fine) {
      &:hover {
        background-color: color-mix(
          in srgb,
          transparent 95%,
          var(--current-neon-theme)
        );

        & :global(svg) {
          stroke-width: 1.5px;
          transform: scale(1.2) translate(6px, -2px);
        }
      }
    }

    @media (pointer: coarse) {
      &:active {
        background-color: color-mix(
          in srgb,
          transparent 95%,
          var(--current-neon-theme)
        );

        & :global(svg) {
          stroke-width: 1.5px;
          transform: scale(1.2);
        }
      }
    }
  }

  .suggestions-section {
    padding: 32px;

    & .close-btn {
      align-self: self-end;
      position: sticky;
      top: 0;
      background-color: var(--current-background-theme);
      z-index: 1;
    }

    &:popover-open {
      display: flex;
      flex-direction: column;
      gap: 16px;
    }
  }
</style>

<script>
  import { DateParser } from "@/utils/scripts";
  import "./../ColoredTag";

  const hoursDiff = DateParser.timeDiference();
  const sLetter = hoursDiff > 1 ? "s" : "";
  const timeZoneElement = document.querySelector(".time-zone");
  let timeZoneText = "Estamos en la misma zona horaria";
  const closeSuggestionsBtn = document.querySelector(
    ".suggestions-section .close-btn",
  );

  if (hoursDiff > 0) {
    timeZoneText = `Vas adelantado por ${hoursDiff} hora${sLetter}`;
  }

  if (hoursDiff < 0) {
    timeZoneText = `Vas atrasado por ${hoursDiff} hora${sLetter}`;
  }

  timeZoneElement.innerHTML = `&#8226; ${timeZoneText}`;

  closeSuggestionsBtn.addEventListener("click", () => {
    const suggestions = document.querySelector(".suggestions-section");
    suggestions.hidePopover();
  });
</script>
